package report;

import java.awt.*;
import java.sql.*;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import javax.swing.*;
import user.MySQLConnection;

public abstract class Report {
    private String id;
    private String generated_by;
    private String generated_date;
    private String description;

    protected Report(String id, String generated_by, String generated_date, String description) {
        setId(id);
        setGeneratedBy(generated_by);
        setGeneratedDate(generated_date);
        setDescription(description);
    }

    public String getId() { return id != null ? id : "Null"; }
    public String getGeneratedBy() { return (generated_by == null || generated_by.isEmpty()) ? "UNKNOWN" : generated_by; }
    public String getGeneratedDate() { return (generated_date == null || generated_date.isEmpty()) ? "NOT SET" : generated_date; }
    public String getDescription() { return description != null ? description : "No description"; }

    protected void setId(String id) { if (id != null && !id.trim().isEmpty()) this.id = id; }
    protected void setGeneratedBy(String generated_by) { if (generated_by != null && !generated_by.trim().isEmpty()) this.generated_by = generated_by; }
    protected void setGeneratedDate(String generated_date) { if (generated_date != null && !generated_date.trim().isEmpty()) this.generated_date = generated_date; }
    protected void setDescription(String description) { this.description = description; }

    public String calculateSummary() {
        LocalDate reportDate = LocalDate.parse(generated_date);
        long daysOld = ChronoUnit.DAYS.between(reportDate, LocalDate.now());
        String urgency = (daysOld <= 3) ? "High" : (daysOld <= 7) ? "Medium" : "Low";
        return "Report is " + daysOld + " days old (" + urgency + " urgency).";
    }

    public void showReportGUI() {
        JFrame frame = new JFrame("Report Viewer");
        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLocationRelativeTo(null);

        JTextArea reportArea = new JTextArea();
        reportArea.setEditable(false);
        reportArea.setFont(new Font("Monospaced", Font.PLAIN, 14));

        reportArea.setText(
                "=== Report Details ===\n\n" +
                "ID: " + getId() + "\n" +
                "Generated By: " + getGeneratedBy() + "\n" +
                "Generated Date: " + getGeneratedDate() + "\n\n" +
                "Description: " + getDescription() + "\n\n" +
                calculateSummary()
        );

        frame.add(new JScrollPane(reportArea));
        frame.setVisible(true);
    }

    public static void fetchReportsFromDB() {
        String query = "SELECT Reports.id, Accounts.username, Reports.report_date, Reports.report_description " +
                       "FROM Reports JOIN Accounts ON Reports.account_id = Accounts.id";

        try (Connection conn = MySQLConnection.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query)) {

            while (rs.next()) {
                String id = String.valueOf(rs.getInt("id"));
                String user = rs.getString("username");
                String date = rs.getTimestamp("report_date").toLocalDateTime().toLocalDate().toString();
                String desc = rs.getString("report_description");

                Report r = new Report(id, user, date, desc) {};
                r.showReportGUI(); 
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        fetchReportsFromDB();
    }
}
