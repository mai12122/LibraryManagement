//super class Report
package report;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

public class Report {
    private String id;
    private String generated_by;
    private String generated_date;

    protected Report(String id, String generated_by, String generated_date) {
        setId(id);
        setGeneratedBy(generated_by);
        setGeneratedDate(generated_date);
    }

    public String getId() { 
        System.out.println("getId() called, returning: " + id);
        if (id == null) {
            System.out.println("id is null, returning 'Null'");
            return "Null";
        }
        return id;
    }

    public String getGeneratedBy() {
        System.out.println("getGeneratedBy() called, returning: " + generated_by);
        if (generated_by == null || generated_by.isEmpty()) {
            System.out.println("generated_by is null or empty, returning 'UNKNOWN'");
            return "UNKNOWN";
        }
        return generated_by;
    }

    public String getGeneratedDate() {
        System.out.println("getGeneratedDate() called, returning: " + generated_date);
        if (generated_date == null || generated_date.isEmpty()) {
            System.out.println("generated_date is null or empty, returning 'NOT SET'");
            return "NOT SET";
        }
        return generated_date;
    }

    protected void setId(String id) {
        System.out.println("setId() called, setting to: " + id);
        if (id != null && !id.trim().isEmpty()) {
            this.id = id;
        } else {
            System.out.println("Invalid ID. It was not set.");
        }
    }

    protected void setGeneratedBy(String generated_by) {
        System.out.println("setGeneratedBy() called, setting to: " + generated_by);
        if (generated_by != null && !generated_by.trim().isEmpty()) {
            this.generated_by = generated_by;
        } else {
            System.out.println("Invalid generated_by. It was not set.");
        }
    }

    protected void setGeneratedDate(String generated_date) {
        System.out.println("setGeneratedDate() called, setting to: " + generated_date);
        if (generated_date != null && !generated_date.trim().isEmpty()) {
            this.generated_date = generated_date;
        } else {
            System.out.println("Invalid generated_date. It was not set.");
        }
    }

    @Override
    public String toString() {
        return "Report{" +
               "id='" + id + '\'' +
               ", generated_by='" + generated_by + '\'' +
               ", generated_date='" + generated_date + '\'' +
               '}';
    }

    public String calculateSummary() {
    LocalDate reportDate = LocalDate.parse(generated_date); 
    long daysOld = ChronoUnit.DAYS.between(reportDate, LocalDate.now());

    String urgency = (daysOld <= 3) ? "High" :
                     (daysOld <= 7) ? "Medium" : "Low";
    return "Report is " + daysOld + " days old (" + urgency + " urgency).";
}

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true; 
        if (obj == null || getClass() != obj.getClass()) return false;

        Report other = (Report) obj;

        if (id != null ? !id.equals(other.id) : other.id != null) return false;
        if (generated_by != null ? !generated_by.equals(other.generated_by) : other.generated_by != null) return false;
        if (generated_date != null ? !generated_date.equals(other.generated_date) : other.generated_date != null)
            return false;

        return true;
    }

    public static void printClassInfo() {
        System.out.println("This is the Report superclass.");
    }
}
//subclass

import java.time.LocalDate;

public class borrowingReport extends Report {
    private String bookTitle;
    private String borrowerId;
    private LocalDate dateBorrowed;
    private LocalDate dueDate;
    private int timesRenewed;
    private int totalTimesBorrowed;

    public borrowingReport(String id, String generatedBy, String generatedDate,
                       String bookTitle, String borrowerId, LocalDate dateBorrowed,
                       LocalDate dueDate, int totalTimesBorrowed) {
    super(id, generatedBy, generatedDate);
    setBookTitle(bookTitle);
    setBorrowerId(borrowerId);
    setDateBorrowed(dateBorrowed);
    setDueDate(dueDate);
    setTotalTimesBorrowed(totalTimesBorrowed);
    setTimesRenewed(0);
}

public String getBookTitle() {
    if (bookTitle == null || bookTitle.isEmpty()) {
        return "Title not available";
    }
    return bookTitle;
}
public void setBookTitle(String bookTitle) {
    if (bookTitle != null && !bookTitle.trim().isEmpty()) {
        this.bookTitle = bookTitle;
    }
}

public String getBorrowerId() {
    if (borrowerId == null || borrowerId.trim().isEmpty()) {
        return "No borrower assigned";
    }
    return borrowerId;
}

public void setBorrowerId(String borrowerId) {
    if (borrowerId != null && !borrowerId.trim().isEmpty()) {
        this.borrowerId = borrowerId;
    }
}

public LocalDate getDateBorrowed() {
    return dateBorrowed;
}

public void setDateBorrowed(LocalDate dateBorrowed) {
    if (dateBorrowed != null && !dateBorrowed.isAfter(LocalDate.now())) {
        this.dateBorrowed = dateBorrowed;
    }
}

public LocalDate getDueDate() {
    return dueDate;
}

public void setDueDate(LocalDate dueDate) {
    if (dueDate != null && (dateBorrowed == null || !dueDate.isBefore(dateBorrowed))) {
        this.dueDate = dueDate;
    }
}

public int getTimesRenewed() {
    return timesRenewed;
}

public void setTimesRenewed(int timesRenewed) {
    if (timesRenewed >= 0) {
        this.timesRenewed = timesRenewed;
    }
}

public int getTotalTimesBorrowed() {
    return totalTimesBorrowed;
}

public void setTotalTimesBorrowed(int totalTimesBorrowed) {
    if (totalTimesBorrowed >= 0) {
        this.totalTimesBorrowed = totalTimesBorrowed;
    }
}

public void incrementTimesBorrowed() {
    this.totalTimesBorrowed++;
}

public void extendDueDate(LocalDate newDueDate) {
    if (newDueDate != null && (dueDate == null || newDueDate.isAfter(dueDate))) {
        this.dueDate = newDueDate;
        this.timesRenewed++;
    }
}

    @Override
    public String calculateSummary() {
    long daysUntilDue = (dueDate == null) ? -1 : java.time.temporal.ChronoUnit.DAYS.between(LocalDate.now(), dueDate);

    String dueInfo = (dueDate == null) ? "Due date not set"
                    : (daysUntilDue < 0) ? "Overdue"
                    : (daysUntilDue == 0) ? "Due today"
                    : "Due in " + daysUntilDue + " day" + (daysUntilDue > 1 ? "s" : "");

    return "Book '" + getBookTitle() + "' is " + dueInfo + ". Borrowed " + getTotalTimesBorrowed() +
           " time" + (getTotalTimesBorrowed() == 1 ? "" : "s") + ", renewed " + getTimesRenewed() +
           " time" + (getTimesRenewed() == 1 ? "" : "s") + ".";
    }
    @Override
    public String toString() {
        return "borrowingReport{" +
                "id='" + getId() + '\'' +
                ", generatedBy='" + getGeneratedBy() + '\'' +
                ", generatedDate='" + getGeneratedDate() + '\'' +
                ", bookTitle='" + bookTitle + '\'' +
                ", borrowerId='" + borrowerId + '\'' +
                ", dateBorrowed=" + dateBorrowed +
                ", dueDate=" + dueDate +
                ", timesRenewed=" + timesRenewed +
                ", totalTimesBorrowed=" + totalTimesBorrowed +
                '}';
    }
    @Override
    public boolean equals(Object obj) {
    if (!super.equals(obj)) return false;
    if (!(obj instanceof borrowingReport)) return false;
    borrowingReport other = (borrowingReport) obj;
    return getBookTitle().equals(other.getBookTitle())
        && getBorrowerId().equals(other.getBorrowerId())
        && getDateBorrowed().equals(other.getDateBorrowed())
        && getDueDate().equals(other.getDueDate())
        && getTimesRenewed() == other.getTimesRenewed()
        && getTotalTimesBorrowed() == other.getTotalTimesBorrowed();
    }
    public static String getReportType() {
    return "Borrowing Report";
    }
}

//main
package report;

import java.time.LocalDate;
import java.util.TreeSet;

public class Main {

    static class ConcreteReport extends Report {
        public ConcreteReport(String id, String generatedBy, String generatedDate) {
            super(id, generatedBy, generatedDate);
        }

        @Override
        public String toString() {
            return "ConcreteReport{" +
                    "id='" + getId() + '\'' +
                    ", generatedBy='" + getGeneratedBy() + '\'' +
                    ", generatedDate='" + getGeneratedDate() + '\'' +
                    '}';
        }
    }

    public static void main(String[] args) {
        Report r1 = new ConcreteReport("R001", "Admin", "2025-07-25");

        borrowingReport b1 = new borrowingReport(
                "B001", "Librarian", "2025-07-20",
                "Harry Potter", "STU123",
                LocalDate.parse("2025-07-20"),
                LocalDate.parse("2025-08-03"),
                5
        );

        TreeSet<Report> reports = new TreeSet<>((rpt1, rpt2) -> rpt1.getId().compareTo(rpt2.getId()));

        reports.add(r1);
        reports.add(b1);

        System.out.println("--- Reports in TreeSet (Sorted by ID) ---");
        for (Report report : reports) {
            System.out.println(report);
        }

        b1.setDueDate(LocalDate.parse("2025-08-10"));
        System.out.println("\n--- After updating B001 due date ---");
        System.out.println(b1);
    }
}
